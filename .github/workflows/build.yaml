on:
  push:
    branches:
      - feature/ci/cd-pipeline
  pull_request:
    branches:
      - feature/ci/cd-pipeline

permissions:
  contents: write

jobs:
  build:
    name: Build portable Windows artifact (diagnostics)
    runs-on: windows-latest
    env:
      npm_config_disturl: "https://electronjs.org/headers"
      npm_config_runtime: "electron"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Write .npmrc to force msvs_version=2022
        shell: pwsh
        run: |
          Set-Content -Path .npmrc -Value 'msvs_version=2022' -Encoding UTF8
          Write-Host ".npmrc written:"
          Get-Content .npmrc

      - name: Export node-gyp / npm env for MSVC 2022
        shell: pwsh
        run: |
          "GYP_MSVS_VERSION=2022" | Out-File -FilePath $env:GITHUB_ENV -Append
          "npm_config_msvs_version=2022" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "Exported GYP_MSVS_VERSION and npm_config_msvs_version to GITHUB_ENV"

      - name: Try install Windows SDK 10.0.19041.0 (best-effort)
        shell: pwsh
        continue-on-error: true
        run: |
          Write-Host "Attempting to install Windows SDK 10.0.19041.0 via Chocolatey (best-effort). This may not be supported on hosted images."
          choco install windows-sdk-10.0 --version=10.1.19041.5609 -y
          Write-Host "choco exit code: $LASTEXITCODE"

      - name: Install MSBuild helper (vswhere)
        uses: microsoft/setup-msbuild@v2

      - name: Diagnose Visual Studio and Windows SDK (vswhere robust)
        shell: pwsh
        run: |
          Write-Host "=== vswhere: locate or download vswhere.exe ==="

          $candidates = @(
            "$env:ProgramFiles\Microsoft Visual Studio\Installer\vswhere.exe",
            "$env:ProgramFiles(x86)\Microsoft Visual Studio\Installer\vswhere.exe",
            "$env:ProgramFiles\Microsoft Visual Studio\Installer\vswhere.exe"
          )

          $vswhere = $null
          foreach ($p in $candidates) {
            if (Test-Path $p) { $vswhere = $p; break }
          }

          if (-not $vswhere) {
            Write-Host "vswhere.exe not found in standard locations. Will attempt to download latest vswhere.exe (best-effort)."
            $temp = [System.IO.Path]::Combine($env:TEMP, 'vswhere.exe')
            try {
              Invoke-WebRequest -Uri 'https://github.com/microsoft/vswhere/releases/latest/download/vswhere.exe' -OutFile $temp -UseBasicParsing -ErrorAction Stop
              Write-Host "Downloaded vswhere to $temp"
              $vswhere = $temp
            } catch {
              Write-Host "Failed to download vswhere.exe: $($_.Exception.Message)"
              $vswhere = $null
            }
          } else {
            Write-Host "Found vswhere at: $vswhere"
          }

          if ($vswhere) {
            try {
              Write-Host "=== vswhere: list all installations ==="
              & $vswhere -all -prerelease -products * -format json | Out-File vswhere.json -Encoding utf8
              Get-Content vswhere.json
            } catch {
              Write-Host "vswhere execution failed: $($_.Exception.Message)"
            }
          } else {
            Write-Host "vswhere not available â€” skipping vswhere diagnostics."
          }

          Write-Host "=== Checking for Windows SDK folders under Program Files (possible SDK locations) ==="
          Get-ChildItem 'C:\Program Files (x86)\Windows Kits\10\Lib' -ErrorAction SilentlyContinue | ForEach-Object { Write-Host $_.FullName }
          Get-ChildItem 'C:\Program Files (x86)\Windows Kits\10\Include' -ErrorAction SilentlyContinue | ForEach-Object { Write-Host $_.FullName }

      - name: Fail early with guidance if no Windows SDK found
        shell: pwsh
        run: |
          $sdkExists = Test-Path 'C:\Program Files (x86)\Windows Kits\10\Include' -PathType Container -ErrorAction SilentlyContinue
          if (-not $sdkExists) {
            Write-Host "Windows SDK not found on runner."
            Write-Host "Recommended options:"
            Write-Host "  1) Use a self-hosted Windows runner with Visual Studio 2022 + 'Desktop development with C++' workload and the required Windows SDK."
            Write-Host "  2) Change electron/sqlite3 versions so prebuilt binaries exist, to avoid node-gyp compilation in CI."
            Write-Host "  3) Continue with hosted runner (build may fail)."
            # do not fail the job here to allow best-effort attempt
          } else {
            Write-Host "Windows SDK seems present; proceeding."
          }

      - name: Install dependencies (under VS dev env if available)
        shell: cmd
        run: |
          if exist "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars64.bat" (
            call "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars64.bat"
          ) else if exist "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat" (
            call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          ) else (
            echo "vcvars64.bat not found in common VS 2022 locations; continuing without vcvars (node-gyp may fail)."
          )
          npm ci

      - name: Rebuild sqlite3 for Electron (electron-rebuild) - best-effort
        shell: cmd
        env:
          npm_config_disturl: "https://electronjs.org/headers"
          npm_config_runtime: "electron"
        run: |
          if exist "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars64.bat" (
            call "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars64.bat"
          ) else if exist "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat" (
            call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          ) else (
            echo "vcvars64.bat not found; continuing (rebuild may fail)."
          )

          for /f "usebackq delims=" %%v in (`node -p "require('./node_modules/electron/package.json').version"`) do set EV=%%v
          echo Detected electron version: %EV%

          npm install --no-save --no-audit electron-rebuild@3
          npx electron-rebuild -v %EV% -f -w sqlite3 || (
            echo "electron-rebuild failed. If it fails due to missing Windows SDK, prefer self-hosted runner with VS+SDK installed."
          )

      - name: Build portable artifact (msvc env + pack)
        shell: cmd
        env:
          CI: true
        run: |
          if exist "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars64.bat" (
            call "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars64.bat"
          ) else if exist "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat" (
            call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          ) else (
            echo "vcvars64.bat not found; attempting to build anyway."
          )

          echo "Running npm run build:portable"
          npm run build:portable

      - name: List potential outputs (debug)
        shell: pwsh
        run: |
          $paths = @('portable','dist','out')
          foreach ($p in $paths) {
            if (Test-Path $p) {
              Write-Host "Contents of $p:"
              Get-ChildItem -Recurse -Force $p | ForEach-Object { Write-Host $_.FullName }
            } else {
              Write-Host "$p not found"
            }
          }

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            portable/**
            dist/**
            out/**

  release:
    name: Create GitHub Release (only on push to main)
    needs: build
    runs-on: windows-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: release_files

      - name: List release_files
        shell: cmd
        run: dir /s /b release_files || echo "no release files"

      - name: Create GitHub release and upload assets
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ github.run_number }}
          files: release_files/**
