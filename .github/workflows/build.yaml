on:
  push:
    branches:
      - feature/ci/cd-pipeline
  pull_request:
    branches:
      - feature/ci/cd-pipeline

permissions:
  contents: write   # required for creating releases/assets with GITHUB_TOKEN

jobs:
  build:
    name: Build & Package (Windows)
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Show Node and npm versions
        run: |
          node -v
          npm -v

      - name: Install dependencies
        run: npm ci

      - name: Rebuild native modules for Electron (sqlite3)
        # PowerShell on windows runner
        shell: pwsh
        env:
          # ensure prebuild-install/electron headers use electron's headers
          npm_config_disturl: "https://electronjs.org/headers"
          npm_config_runtime: "electron"
        run: |
          # Get the installed electron version (exact) and force-rebuild sqlite3 for that electron version.
          $ev = node -p "require('./node_modules/electron/package.json').version"
          Write-Host "Detected electron version: $ev"
          Write-Host "Running electron-rebuild for sqlite3 against electron $ev"
          # Install electron-rebuild locally (no package.json change) and run it to rebuild native module(s) for Electron.
          npm install --no-save --no-audit electron-rebuild@3
          npx electron-rebuild -v $ev -f -w sqlite3

      - name: Setup MSVC
        run: |
          choco install visualstudio2022buildtools --params "--add Microsoft.VisualStudio.Workload.VCTools --quiet --norestart" -y
        
      - name: Build (TypeScript / app) - PowerShell safe
        shell: pwsh
        run: |
          # Detect if package.json defines a "build" script; run it only if present.
          $hasBuild = node -e "try { console.log(Boolean(require('./package.json').scripts && require('./package.json').scripts.build)); } catch (e) { console.log(false); }"
          Write-Host "package.json reports build script present? -> $hasBuild"
          if ($hasBuild -eq 'true') {
            npm run build
          } else {
            Write-Host "No build script defined, skipping npm run build"
          }

      - name: Package Windows EXE
        env:
          CI: true
        run: |
          # This runs your packaging command; it should produce the installer/exe in dist/ or similar
          npm run pack:win

      - name: List dist output (for debugging)
        run: dir /s /b dist || echo "dist folder not found"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/**
            out/**

  release:
    name: Create GitHub Release (only on push to main)
    needs: build
    runs-on: windows-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: release_files

      - name: List release_files (debug)
        run: dir /s /b release_files || echo "no release files"

      - name: Create GitHub release and upload assets
        # ncipollo/release-action will create (or update) a release and attach files
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ github.run_number }}
          files: release_files/**
