const BaseParser = require('../core/BaseParser');

class DisplayBgpVpnv4PeerParser extends BaseParser {
    constructor() {
        super();
        this.name = 'display_bgp_vpnv4_peer_block';
        this.currentVpnInstance = null; // –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ—Ç–æ—á–Ω–∏–π VPN
    }

    isEntryPoint(line) {
        return line.includes('display bgp vpnv4 all peer');
    }

    startBlock(line, match) {
        super.startBlock(line, match);
        this.data = {
            type: this.name,
            global_info: {},
            vpn_instances: [],
        };
        this.currentVpnInstance = null;
    }

    parseLine(line) {
        const trimmedLine = line.trim();

        if (!trimmedLine || trimmedLine.startsWith('Peer      ') || line.includes('Peer of IPv4-family for vpn instance')) {
            return true;
        }

        let kvMatch = trimmedLine.match(/^(?<key>BGP local router ID|Local AS number|Total number of peers|Peers in established state)\s*:\s*(?<value>.*)/i);
        if (kvMatch) {
            this._parseGlobalInfo(kvMatch.groups);
            return true;
        }

        // üî• –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –¢–£–¢: –ó–∞–º—ñ–Ω–µ–Ω–æ [\d\.]+ –Ω–∞ \S+ –¥–ª—è router_id
        const vpnHeaderMatch = trimmedLine.match(/^VPN-Instance\s+(?<name>[^,]+),\s+Router ID\s+(?<router_id>\S+):/);
        if (vpnHeaderMatch) {
            const newVpn = { name: vpnHeaderMatch.groups.name.trim(), router_id: vpnHeaderMatch.groups.router_id, peers: [] };
            this.data.vpn_instances.push(newVpn);
            this.currentVpnInstance = newVpn;
            return true;
        }

        // –†–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è –ø—ñ—Ä—ñ–≤ –≤–∂–µ –±—É–ª–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é (\S+), —Ç–æ–º—É —ó—ó –Ω–µ —á—ñ–ø–∞—î–º–æ
        const peerMatch = trimmedLine.match(/^(?<peer>\S+)\s+(?<v>\d+)\s+(?<as>\S+)\s+(?<msg_rcvd>\d+)\s+(?<msg_sent>\d+)\s+(?<out_q>\d+)\s+(?<up_down>\S+)\s+(?<state>\S+)\s+(?<pref_rcv>\d+)$/);
        if (this.currentVpnInstance && peerMatch) {
            this._addPeer(this.currentVpnInstance.peers, peerMatch.groups);
            return true;
        }

        return true;
    }

    // --- –î–æ–ø–æ–º—ñ–∂–Ω—ñ –º–µ—Ç–æ–¥–∏ (–∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω) ---
    _addPeer(targetArray, groups) {
        targetArray.push({
            peer: groups.peer,
            version: parseInt(groups.v, 10),
            as_number: groups.as,
            msg_received: parseInt(groups.msg_rcvd, 10),
            msg_sent: parseInt(groups.msg_sent, 10),
            out_queue: parseInt(groups.out_q, 10),
            up_down_time: groups.up_down,
            state: groups.state,
            prefixes_received: parseInt(groups.pref_rcv, 10),
        });
    }
    _parseGlobalInfo(groups) {
        const key = this._normalizeKey(groups.key);
        const value = groups.value;
        if (key === 'total_number_of_peers') {
            const stats = value.match(/(\d+)\s+Peers in established state\s*:\s*(\d+)/);
            if (stats) {
                this.data.global_info['total_peers'] = parseInt(stats[1], 10);
                this.data.global_info['established_peers'] = parseInt(stats[2], 10);
            } else { this.data.global_info['total_peers'] = this._parseValue(value); }
        } else if (key === 'peers_in_established_state') {
            this.data.global_info['established_peers'] = this._parseValue(value);
        } else {
            this.data.global_info[key] = this._parseValue(value);
        }
    }
    _normalizeKey(key) { return key.trim().toLowerCase().replace(/\s+/g, '_'); }
    _parseValue(value) {
        const trimmed = value.trim();
        if (trimmed.includes('.') || trimmed.includes('*')) return trimmed;
        const num = parseInt(trimmed, 10);
        return !isNaN(num) && String(num) === trimmed ? num : trimmed;
    }
    isBlockComplete(line) {
        const trimmedLine = line.trim();

        // 1. –Ø–∫—â–æ —Ä—è–¥–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π, –º–∏ –¢–û–ß–ù–û –ù–ï –∑–∞–≤–µ—Ä—à—É—î–º–æ –±–ª–æ–∫
        if (!trimmedLine) {
            return false; // –ù–∞–∫–∞–∑—É—î–º–æ –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏ –ø–∞—Ä—Å–∏–Ω–≥
        }

        // 2. –î–ª—è –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö —Ä—è–¥–∫—ñ–≤ (–Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ—Ö) -
        // –º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É –ª–æ–≥—ñ–∫—É –∑ BaseParser.
        // –í–æ–Ω–∞ –ø–æ–≤–∏–Ω–Ω–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ –ª–æ–≤–∏—Ç–∏ –∫–æ–º–∞–Ω–¥–Ω–∏–π —Ä—è–¥–æ–∫ (<...>)
        // –∞–±–æ –ø–æ—á–∞—Ç–æ–∫ —ñ–Ω—à–æ–≥–æ –±–ª–æ–∫—É.
        return super.isBlockComplete(line);
    }
}

module.exports = DisplayBgpVpnv4PeerParser;