const BaseParser = require('../core/BaseParser');

/**
 * –ü–∞—Ä—Å–µ—Ä –¥–ª—è –≤—ã–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã 'display vxlan tunnel all'.
 * * –°–æ–±–∏—Ä–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ "Vpn Instance Name".
 * –ö–∞–∂–¥—ã–π –∏–Ω—Å—Ç–∞–Ω—Å —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å–ø–∏—Å–æ–∫ —Ç—É–Ω–Ω–µ–ª–µ–π.
 */
class DisplayVxlanTunnelParser extends BaseParser {

    constructor() {
        super();
        this.name = 'display_vxlan_tunnel_block';
        this.currentVpnInstance = null; // –ö–æ–Ω—Ç–µ–∫—Å—Ç: —Ç–µ–∫—É—â–∏–π VPN-–∏–Ω—Å—Ç–∞–Ω—Å
    }

    isEntryPoint(line) {
        return line.includes('display vxlan tunnel all');
    }

    startBlock(line, match) {
        super.startBlock(line, match);
        this.data = {
            ...this.data, // –ù–∞—Å–ª–µ–¥—É–µ–º 'type', 'parsed_at'
            vpn_instances: []
        };
        this.currentVpnInstance = null;
    }

    /**
     * üî• –í–∞–∂–Ω–æ–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:
     * –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –ù–ï –¥–æ–ª–∂–Ω—ã –∑–∞–≤–µ—Ä—à–∞—Ç—å —ç—Ç–æ—Ç –±–ª–æ–∫,
     * —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏.
     */
    isBlockComplete(line) {
        const trimmedLine = line.trim();
        if (!trimmedLine) {
            return false; // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
        }
        return super.isBlockComplete(line);
    }

    parseLine(line) {
        const trimmedLine = line.trim();

        // 1. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏/—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
        if (!trimmedLine ||
            trimmedLine.startsWith('Tunnel ID') ||
            trimmedLine.startsWith('---')) {
            return true;
        }

        // 2. –ò—â–µ–º –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ VPN-–∏–Ω—Å—Ç–∞–Ω—Å–∞
        let vpnMatch = trimmedLine.match(/^Vpn Instance Name\s*:\s*(?<name>\S+)/i);
        if (vpnMatch) {
            const newVpn = {
                name: vpnMatch.groups.name,
                total_tunnels: 0,
                tunnels: []
            };
            this.data.vpn_instances.push(newVpn);
            this.currentVpnInstance = newVpn; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            return true;
        }

        // --- –í—Å–µ, —á—Ç–æ –Ω–∏–∂–µ, —Ç—Ä–µ–±—É–µ—Ç –Ω–∞–ª–∏—á–∏—è 'currentVpnInstance' ---
        if (!this.currentVpnInstance) {
            // –ï—Å–ª–∏ –º—ã –µ—â–µ –Ω–µ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ "Vpn Instance Name", –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É
            return true;
        }

        // 3. –ò—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—É–Ω–Ω–µ–ª–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω—Å—Ç–∞–Ω—Å–∞
        let countMatch = trimmedLine.match(/^Number of vxlan tunnel\s*:\s*(?<count>\d+)/i);
        if (countMatch) {
            this.currentVpnInstance.total_tunnels = parseInt(countMatch.groups.count, 10);
            return true;
        }

        // 4. –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∞–º–æ–≥–æ —Ç—É–Ω–Ω–µ–ª—è
        // (ID, Source, Destination, State, Type, Uptime)
        let tunnelMatch = trimmedLine.match(/^(?<tunnel_id>\d+)\s+(?<source>\S+)\s+(?<destination>\S+)\s+(?<state>\S+)\s+(?<type>\S+)\s+(?<uptime>\S+)$/);
        if (tunnelMatch) {
            this._addTunnel(this.currentVpnInstance.tunnels, tunnelMatch.groups);
            return true;
        }

        // –ü–µ—Ä–µ–¥–∞–µ–º –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ BaseParser
        return super.parseLine(line);
    }

    // --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ ---

    _addTunnel(targetArray, groups) {
        targetArray.push({
            tunnel_id: parseInt(groups.tunnel_id, 10),
            source: groups.source,
            destination: groups.destination,
            state: groups.state,
            type: groups.type,
            uptime: groups.uptime
        });
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å
module.exports = DisplayVxlanTunnelParser;