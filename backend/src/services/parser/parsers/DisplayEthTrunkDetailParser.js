const BaseParser = require('../core/BaseParser');

class DisplayEthTrunkDetailParser extends BaseParser {
    constructor() {
        super();
        this.name = 'display_eth_trunk_detail_block';
        this.currentTrunk = null;
        this.currentState = null;
    }

    isEntryPoint(line) {
        const regex = /^Eth-Trunk(?<id>\d+)'s state information is:/;
        return line.match(regex);
    }

    startBlock(line, match) {
        super.startBlock(line, match);
        this.data = {
            type: this.name,
            trunks: [],
        };
        this._startNewTrunk(match);
    }

    _startNewTrunk(match) {
        const newTrunk = {
            id: parseInt(match.groups.id, 10),
            mode_type: null,
            local_info: {},
            actor_ports: [],
            partner_ports: [],
            normal_ports: []
        };
        this.data.trunks.push(newTrunk);
        this.currentTrunk = newTrunk;
        this.currentState = 'parsing_local_info';
    }

    parseLine(line) {
        const trimmedLine = line.trim();

        // 0. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–æ–≤–∏–π Eth-Trunk
        const entryMatch = line.match(/^Eth-Trunk(?<id>\d+)'s state information is:/);
        if (entryMatch) {
            if (!this.currentTrunk || this.currentTrunk.id !== parseInt(entryMatch.groups.id, 10)) {
                this._startNewTrunk(entryMatch);
            }
            return true;
        }

        if (!this.currentTrunk) return true;

        // 1. –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ —Ä—è–¥–∫–∏ —Ç–∞ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫–∏
        if (!trimmedLine || trimmedLine.startsWith('---')) {
            return true;
        }

        // === –ö–Ü–ù–¶–ï–í–ò–ô –ê–í–¢–û–ú–ê–¢ (STATE MACHINE) ===

        if (this.currentState === 'parsing_local_info') {
            // 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ—Ö—ñ–¥ –¥–æ —Ç–∞–±–ª–∏—Ü—å
            if (trimmedLine.startsWith('ActorPortName')) {
                this.currentState = 'parsing_lacp_actor';
                return true;
            }
            if (trimmedLine.startsWith('Partner:')) {
                this.currentState = 'parsing_lacp_partner';
                return true;
            }
            if (trimmedLine.startsWith('PortName')) {
                this.currentState = 'parsing_normal_ports';
                return true;
            }

            // 3. üî• –í–ò–ü–†–ê–í–õ–ï–ù–ê –õ–û–ì–Ü–ö–ê: –ü–∞—Ä—Å–∏–º–æ –∫—ñ–ª—å–∫–∞ –ø–∞—Ä "–∫–ª—é—á:–∑–Ω–∞—á–µ–Ω–Ω—è" –≤ —Ä—è–¥–∫—É
            // –¶—è —Ä–µ–≥—É–ª—è—Ä–∫–∞ —à—É–∫–∞—î –∫–ª—é—á (–¥–æ –¥–≤–æ–∫—Ä–∞–ø–∫–∏) —ñ –∑–Ω–∞—á–µ–Ω–Ω—è (–¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫–ª—é—á–∞ –∞–±–æ –∫—ñ–Ω—Ü—è —Ä—è–¥–∫–∞)
            // –í–æ–Ω–∞ —Ç–∞–∫–æ–∂ –≤—Ä–∞—Ö–æ–≤—É—î, —â–æ –∫–ª—é—á –º–æ–∂–µ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ –ø—Ä–æ–±—ñ–ª—ñ–≤ (—è–∫ —É —Ä—è–¥–∫—É 'Working Mode...')
            const kvPairsRegex = /\s*(?<key>[^:]+?):\s*(?<value>.*?)(?=\s{2,}[^:]+:|$)/g;

            let match;
            while ((match = kvPairsRegex.exec(line)) !== null) {
                if (match.groups.key && match.groups.key.trim()) {
                    const key = this._normalizeKey(match.groups.key);
                    const value = this._parseValue(match.groups.value);

                    this.currentTrunk.local_info[key] = value;

                    // üî• –ö–ª—é—á–æ–≤–∏–π –º–æ–º–µ–Ω—Ç: –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏
                    if (key === 'working_mode') {
                        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –ü–û–ß–ò–ù–ê–Ñ–¢–¨–°–Ø –∑ 'Normal' –∞–±–æ 'Static'
                        if (String(value).startsWith('Normal')) {
                            this.currentTrunk.mode_type = 'Manual';
                        } else if (String(value).startsWith('Static')) {
                            this.currentTrunk.mode_type = 'LACP';
                        }
                    }
                }
            }
            return true;
        }

        // --- –°–¢–ê–ù: –†–æ–∑–±—ñ—Ä —Ç–∞–±–ª–∏—Ü—ñ Actor (LACP) ---
        if (this.currentState === 'parsing_lacp_actor') {
            if (trimmedLine.startsWith('Partner:')) {
                this.currentState = 'parsing_lacp_partner';
                return true;
            }
            const actorMatch = trimmedLine.match(/^(?<name>\S+)\s+(?<status>\S+)\s+(?<type>\S+)\s+(?<pri>\d+)\s+(?<no>\d+)\s+(?<key>\d+)\s+(?<state>\d+)\s+(?<weight>\d+)$/);
            if (actorMatch) {
                this.currentTrunk.actor_ports.push({
                    port_name: actorMatch.groups.name,
                    status: actorMatch.groups.status,
                    port_type: actorMatch.groups.type,
                    priority: parseInt(actorMatch.groups.pri, 10),
                    port_no: parseInt(actorMatch.groups.no, 10),
                    port_key: parseInt(actorMatch.groups.key, 10),
                    port_state: actorMatch.groups.state,
                    weight: parseInt(actorMatch.groups.weight, 10)
                });
            }
            return true;
        }

        // --- –°–¢–ê–ù: –†–æ–∑–±—ñ—Ä —Ç–∞–±–ª–∏—Ü—ñ Partner (LACP) ---
        if (this.currentState === 'parsing_lacp_partner') {
            if (trimmedLine.startsWith('ActorPortName')) return true; // –Ü–≥–Ω–æ—Ä—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            const partnerMatch = trimmedLine.match(/^(?<name>\S+)\s+(?<sys_pri>\d+)\s+(?<sys_id>\S+)\s+(?<port_pri>\d+)\s+(?<port_no>\d+)\s+(?<port_key>\d+)\s+(?<port_state>\d+)$/);
            if (partnerMatch) {
                this.currentTrunk.partner_ports.push({
                    port_name: partnerMatch.groups.name,
                    system_priority: parseInt(partnerMatch.groups.sys_pri, 10),
                    system_id: partnerMatch.groups.sys_id,
                    port_priority: parseInt(partnerMatch.groups.port_pri, 10),
                    port_no: parseInt(partnerMatch.groups.port_no, 10),
                    port_key: parseInt(partnerMatch.groups.port_key, 10),
                    port_state: partnerMatch.groups.port_state
                });
            }
            return true;
        }

        // --- –°–¢–ê–ù: –†–æ–∑–±—ñ—Ä —Ç–∞–±–ª–∏—Ü—ñ –ø–æ—Ä—Ç—ñ–≤ (Normal/Manual) ---
        if (this.currentState === 'parsing_normal_ports') {
            const normalMatch = trimmedLine.match(/^(?<name>\S+)\s+(?<status>\S+)\s+(?<weight>\d+)$/);
            if (normalMatch) {
                this.currentTrunk.normal_ports.push({
                    port_name: normalMatch.groups.name,
                    status: normalMatch.groups.status,
                    weight: parseInt(normalMatch.groups.weight, 10)
                });
            }
            return true;
        }

        return false;
    }

    _normalizeKey(key) {
        // –ß–∏—Å—Ç–∏–º–æ –∫–ª—é—á –≤—ñ–¥ –∑–∞–π–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 'Local:'
        return key.trim().toLowerCase().replace('local:', '').trim().replace(/\s+/g, '_');
    }

    _parseValue(value) {
        const trimmed = value.trim();
        const num = parseInt(trimmed, 10);
        return !isNaN(num) && String(num) === trimmed ? num : trimmed;
    }
}

module.exports = DisplayEthTrunkDetailParser;