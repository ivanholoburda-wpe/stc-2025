const BaseParser = require('../../../../../../Users/Professional/Desktop/stc-2025-parser/parser/core/BaseParser');

class DisplayPowerDetailParser extends BaseParser {
    constructor() {
        super();
        this.name = 'display_power_detail_block';
    }

    isEntryPoint(line) {
        const regex = /^PWR\s+(?<id>\S+)'s detail information:/;
        return line.match(regex);
    }

    startBlock(line, match) {
        super.startBlock(line, match);
        this.data = {
            type: this.name,
            power_id: match.groups.id,
        };
    }

    parseLine(line) {
        const trimmedLine = line.trim();

        // 1. –Ü–≥–Ω–æ—Ä—É—î–º–æ —Ä—è–¥–∫–∏-—Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫–∏ '---'
        if (trimmedLine.startsWith('---')) {
            return true;
        }

        // 2. –ù–∞–º–∞–≥–∞—î–º–æ—Å—è —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏ –ù–ï–ü–û–†–û–ñ–ù–Ü —Ä—è–¥–∫–∏ —è–∫ "–∫–ª—é—á : –∑–Ω–∞—á–µ–Ω–Ω—è"
        if (trimmedLine) {
            const kvMatch = trimmedLine.match(/^\s*(?<key>.+?)\s*:\s*(?<value>.*)$/);
            if (kvMatch) {
                const { key, value } = kvMatch.groups;
                if (key.trim()) {
                    const normalizedKey = this._normalizeKey(key);
                    const parsedValue = this._parseValue(value);
                    if (normalizedKey === 'type') {
                        this.data['power_supply_type'] = parsedValue;
                    } else {
                        this.data[normalizedKey] = parsedValue;
                    }
                }
                return true; // –†—è–¥–æ–∫ —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ (–∞–±–æ –ø—Ä–æ—ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–æ, —è–∫—â–æ –∫–ª—é—á –ø–æ—Ä–æ–∂–Ω—ñ–π)
            }
        }

        // 3. –ë—É–¥—å-—è–∫—ñ —ñ–Ω—à—ñ —Ä—è–¥–∫–∏ (–ø–æ—Ä–æ–∂–Ω—ñ, –∑–∞–≥–æ–ª–æ–≤–∫–∏, —â–æ –Ω–µ –∑–±—ñ–≥–ª–∏—Å—è –∑ kvMatch)
        // –≤–≤–∞–∂–∞—î–º–æ –æ–±—Ä–æ–±–ª–µ–Ω–∏–º–∏ (–ø—Ä–æ—ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–∏–º–∏)
        return true;
    }

    /**
     * üî• –ü–ï–†–ï–í–ò–ó–ù–ê–ß–ï–ù–ù–Ø –õ–û–ì–Ü–ö–ò –ó–ê–í–ï–†–®–ï–ù–ù–Ø –ë–õ–û–ö–£ üî•
     * –¶–µ–π –º–µ—Ç–æ–¥ —Ç–µ–ø–µ—Ä –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—è –∑–∞–º—ñ—Å—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∑ BaseParser.
     */
    isBlockComplete(line) {
        const trimmedLine = line.trim();

        // 1. –¢–æ—á–Ω–æ –∑—É–ø–∏–Ω—è—î–º–æ—Å—è, —è–∫—â–æ –±–∞—á–∏–º–æ –∫–æ–º–∞–Ω–¥–Ω–∏–π —Ä—è–¥–æ–∫
        if (/^<.*>$/.test(trimmedLine)) {
            return true;
        }

        // 2. –ó—É–ø–∏–Ω—è—î–º–æ—Å—è, —è–∫—â–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ä—è–¥–æ–∫ —î –ø–æ—á–∞—Ç–∫–æ–º –Ü–ù–®–û–ì–û –±–ª–æ–∫—É PWR detail
        // (–í–∞–∂–ª–∏–≤–æ: –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —Ü–µ –Ω–µ —Ç–æ–π —Å–∞–º–∏–π —Ä—è–¥–æ–∫, –∑ —è–∫–æ–≥–æ –º–∏ –ø–æ—á–∞–ª–∏)
        if (/^PWR\s+\S+'s detail information:/.test(trimmedLine) && trimmedLine !== this.raw_line) {
            return true;
        }

        
        
        
        if (trimmedLine.startsWith('FAN ') && trimmedLine.includes("'s detail information:")) return true;
        if (trimmedLine.includes('IP ADDRESS') && trimmedLine.includes('MAC ADDRESS')) return true; 
        if (trimmedLine.includes('Destination/Mask') && trimmedLine.includes('Proto')) return true; 
        

        
        return false;
    }


    _normalizeKey(key) {
        return key.trim().toLowerCase().replace(/[^a-z0-9_\s]/g, '').replace(/\s+/g, '_');
    }

    _parseValue(value) {
        const trimmed = value.trim();
        if (trimmed === '') return null;
        if (trimmed === 'PRESENT') return true;
        if (trimmed === 'ABSENT') return false;
        if (trimmed === 'NORMAL' || trimmed === 'PLUG' || trimmed === 'DC') return trimmed;

        const num = parseFloat(trimmed);
        return !isNaN(num) && isFinite(num) && String(num) === trimmed.match(/^-?\d+(\.\d+)?$/)?.[0] ? num : trimmed;
    }
}

module.exports = DisplayPowerDetailParser;