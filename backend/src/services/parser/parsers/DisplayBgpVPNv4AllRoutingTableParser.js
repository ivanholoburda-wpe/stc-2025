const BaseParser = require('../core/BaseParser');

/**
 * –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ (—É –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å 'Network').
 */
const REGEX_PRIMARY_ROUTE = /^(?<status>\S+)\s+(?<network>\S+)\s+(?<nexthop>\S+)\s+(?<med>\S*)\s+(?<locprf>\S*)\s+(?<prefval>\S+)\s+(?<path>.*)$/;

/**
 * –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—Ç–æ—Ä–∏—á–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ (–≥–¥–µ 'Network' –ø—É—Å—Ç).
 * –ö–ª—é—á–µ–≤–æ–µ –æ—Ç–ª–∏—á–∏–µ - \s{2,} (–¥–≤–∞ –∏–ª–∏ –±–æ–ª–µ–µ –ø—Ä–æ–±–µ–ª–∞) –ø–æ—Å–ª–µ 'status'.
 */
const REGEX_SECONDARY_ROUTE = /^(?<status>\S+)\s{2,}(?<nexthop>\S+)\s+(?<med>\S*)\s+(?<locprf>\S*)\s+(?<prefval>\S+)\s+(?<path>.*)$/;


class DisplayBgpVpnv4RoutingTableParser extends BaseParser {

    constructor() {
        super();
        this.name = 'display_bgp_vpnv4_routing_table_block';
        this.currentRD = null;
        this.lastPrimaryRoute = null;
    }

    isEntryPoint(line) {
        return line.includes('display bgp vpnv4 all routing-table');
    }

    startBlock(line, match) {
        super.startBlock(line, match);
        this.data = {
            ...this.data,
            global_info: {},
            route_distinguishers: []
        };
        this.currentRD = null;
        this.lastPrimaryRoute = null;
    }

    isBlockComplete(line) {
        const trimmedLine = line.trim();
        if (!trimmedLine) {
            return false; // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
        }
        return super.isBlockComplete(line);
    }

    parseLine(line) {
        const trimmedLine = line.trim();

        // 1. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if (!trimmedLine ||
            trimmedLine.startsWith('Status codes:') ||
            trimmedLine.startsWith('RPKI validation codes:') ||
            trimmedLine.startsWith('Network      ')) {
            return true;
        }

        // 2. –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        let routerIdMatch = trimmedLine.match(/^BGP Local router ID is (?<router_id>\S+)/i);
        if (routerIdMatch) {
            this.data.global_info.local_router_id = routerIdMatch.groups.router_id;
            return true;
        }

        let totalRoutesMatch = trimmedLine.match(/^Total number of routes from all PE: (?<total>\d+)/i);
        if (totalRoutesMatch) {
            this.data.global_info.total_routes_all_pe = parseInt(totalRoutesMatch.groups.total, 10);
            return true;
        }

        // 3. –ù–æ–≤—ã–π Route Distinguisher (RD)
        let rdMatch = trimmedLine.match(/^Route Distinguisher: (?<rd>\S+)/i);
        if (rdMatch) {
            this.currentRD = {
                rd: rdMatch.groups.rd,
                routes: []
            };
            this.data.route_distinguishers.push(this.currentRD);
            this.lastPrimaryRoute = null;
            return true;
        }

        // 4. –ü–∞—Ä—Å–∏–Ω–≥ –º–∞—Ä—à—Ä—É—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –≤–Ω—É—Ç—Ä–∏ RD)
        if (!this.currentRD) {
            return true; // –ñ–¥–µ–º RD
        }

        // --- üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ú–ï–ù–Ø–ï–ú –ë–õ–û–ö–ò –ú–ï–°–¢–ê–ú–ò ---

        // 4a. –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –í–¢–û–†–ò–ß–ù–´–ô –º–∞—Ä—à—Ä—É—Ç (–±–µ–∑ Network) –ü–ï–†–í–´–ú
        let secondaryMatch = trimmedLine.match(REGEX_SECONDARY_ROUTE);
        if (secondaryMatch) {
            const path = this._createRouteObject(secondaryMatch.groups);

            if (this.lastPrimaryRoute) {
                if (!this.lastPrimaryRoute.secondary_paths) {
                    this.lastPrimaryRoute.secondary_paths = [];
                }
                this.lastPrimaryRoute.secondary_paths.push(path);
            } else {
                this.currentRD.routes.push(path);
            }
            return true;
        }

        // 4b. –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –û–°–ù–û–í–ù–û–ô –º–∞—Ä—à—Ä—É—Ç (—Å Network) –í–¢–û–†–´–ú
        let primaryMatch = trimmedLine.match(REGEX_PRIMARY_ROUTE);
        if (primaryMatch) {
            const route = this._createRouteObject(primaryMatch.groups);
            this.currentRD.routes.push(route);
            this.lastPrimaryRoute = route; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Å–Ω–æ–≤–Ω–æ–π
            return true;
        }

        // ---------------------------------------------

        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–æ–≤–ø–∞–ª–æ, –ø–µ—Ä–µ–¥–∞–µ–º –≤ BaseParser (–æ–Ω —Å–æ–æ–±—â–∏—Ç –æ–± –æ—à–∏–±–∫–µ)
        return super.parseLine(line);
    }

    // --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã ---

    _createRouteObject(groups) {
        return {
            status: groups.status,
            network: this._parseValue(groups.network),
            next_hop: groups.nexthop,
            med: this._parseValue(groups.med),
            loc_prf: this._parseValue(groups.locprf),
            pref_val: this._parseValue(groups.prefval),
            path_ogn: this._parseValue(groups.path)
        };
    }

    _parseValue(value) {
        if (value === undefined || value === null) {
            return null;
        }

        const trimmed = value.trim();

        if (trimmed === '') {
            return null;
        }

        if (trimmed.includes(' ') || trimmed.includes('?') || trimmed.includes('i') || trimmed.includes('e') || trimmed.includes('*')) {
            return trimmed;
        }

        const num = parseInt(trimmed, 10);
        return !isNaN(num) && String(num) === trimmed ? num : trimmed;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å
module.exports = DisplayBgpVpnv4RoutingTableParser;