const BaseParser = require('../core/BaseParser');

// üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: Regex —Å—Ç–∞–ª–∏ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–º–∏

// REGEX: –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç (—Å Network).
// –ò—â–µ–º –Ω–µ-–∂–∞–¥–Ω–æ (?<status>.+?), –∑–∞—Ç–µ–º –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô (?<network>\S+[\.:]\S+)
const REGEX_PRIMARY_ROUTE = /^(?<status>.+?)\s+(?<network>\S+[\.:]\S+)\s+(?<nexthop>\S+)$/;

// REGEX: –í—Ç–æ—Ä–∏—á–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç (–±–µ–∑ Network).
// –ò—â–µ–º –Ω–µ-–∂–∞–¥–Ω–æ (?<status>.+?), –∑–∞—Ç–µ–º –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï 2+ –ø—Ä–æ–±–µ–ª–∞ (?<nexthop>\S+)
const REGEX_SECONDARY_ROUTE = /^(?<status>.+?)\s{2,}(?<nexthop>\S+)$/;


class DisplayBgpEvpnRoutingTableParser extends BaseParser {

    constructor() {
        super();
        this.name = 'display_bgp_evpn_routing_table_block';

        this.currentContainer = null;
        this.currentRD = null;
        this.lastPrimaryRoute = null;
    }

    isEntryPoint(line) {
        return line.includes('display bgp evpn all routing-table');
    }

    startBlock(line, match) {
        super.startBlock(line, match);
        this.data = {
            ...this.data,
            global_info: {},
            evpn_address_family: {
                total_ad_routes: 0,
                route_distinguishers: []
            },
            evpn_instances: []
        };
        this.currentContainer = null;
        this.currentRD = null;
        this.lastPrimaryRoute = null;
    }

    isBlockComplete(line) {
        const trimmedLine = line.trim();
        if (!trimmedLine) {
            return false;
        }
        return super.isBlockComplete(line);
    }

    parseLine(line) {
        const trimmedLine = line.trim();

        // 1. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ —Å—Ç—Ä–æ–∫–∏
        if (!trimmedLine ||
            trimmedLine.startsWith('Status codes:') ||
            trimmedLine.startsWith('Origin :') ||
            trimmedLine.startsWith('RPKI validation codes:') ||
            trimmedLine.startsWith('Network(ESI/EthTagId)')) {
            return true;
        }

        // ... (–ö–æ–¥ –¥–ª—è 'asMatch', 'routerIdMatch', 'instanceMatch', 'rdMatch', 'adCountMatch' –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º) ...
        // (–Ø –µ–≥–æ –æ–ø—É—â—É –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏, –æ–Ω —É –≤–∞—Å –≤–µ—Ä–Ω—ã–π)

        // 2. –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        let asMatch = trimmedLine.match(/^Local AS number\s*:\s*(?<as>\S+)/i);
        if (asMatch) {
            this.data.global_info.local_as = asMatch.groups.as;
            return true;
        }

        let routerIdMatch = trimmedLine.match(/^BGP Local router ID is (?<router_id>\S+)/i);
        if (routerIdMatch) {
            this.data.global_info.local_router_id = routerIdMatch.groups.router_id;
            return true;
        }

        // 3. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞" (–ö–æ–Ω—Ç–µ–∫—Å—Ç–∞)
        if (trimmedLine.startsWith('EVPN address family:')) {
            this.currentContainer = this.data.evpn_address_family;
            this.currentRD = null;
            this.lastPrimaryRoute = null;
            return true;
        }

        let instanceMatch = trimmedLine.match(/^EVPN-Instance\s+(?<name>\S+):/i);
        if (instanceMatch) {
            const newInstance = {
                name: instanceMatch.groups.name,
                total_ad_routes: 0,
                routes: []
            };
            this.data.evpn_instances.push(newInstance);
            this.currentContainer = newInstance;
            this.currentRD = null;
            this.lastPrimaryRoute = null;
            return true;
        }

        // --- 4. –î–∞–Ω–Ω—ã–µ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ---
        if (!this.currentContainer) {
            return true;
        }

        let adCountMatch = trimmedLine.match(/^Number of A-D Routes:\s*(?<count>\d+)/i);
        if (adCountMatch) {
            this.currentContainer.total_ad_routes = parseInt(adCountMatch.groups.count, 10);
            return true;
        }

        let rdMatch = trimmedLine.match(/^Route Distinguisher:\s*(?<rd>\S+)/i);
        if (rdMatch && this.currentContainer === this.data.evpn_address_family) {
            const newRD = {
                rd: rdMatch.groups.rd,
                routes: []
            };
            this.currentContainer.route_distinguishers.push(newRD);
            this.currentRD = newRD;
            this.lastPrimaryRoute = null;
            return true;
        }

        // 5. –ü–∞—Ä—Å–∏–Ω–≥ –º–∞—Ä—à—Ä—É—Ç–æ–≤
        let targetRouteArray = null;
        if (this.currentContainer === this.data.evpn_address_family) {
            if (this.currentRD) targetRouteArray = this.currentRD.routes;
        } else {
            targetRouteArray = this.currentContainer.routes;
        }

        if (!targetRouteArray) {
            return true;
        }

        // --- üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –ú–µ–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ ---

        // 5a. –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç (—Å Network) - –ü–†–û–í–ï–†–Ø–¢–¨ –ü–ï–†–í–´–ú
        let primaryMatch = trimmedLine.match(REGEX_PRIMARY_ROUTE);
        if (primaryMatch) {
            const route = this._createRouteObject(primaryMatch.groups);
            targetRouteArray.push(route);
            this.lastPrimaryRoute = route; // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –µ–≥–æ
            return true;
        }

        // 5b. –í—Ç–æ—Ä–∏—á–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç (–±–µ–∑ Network) - –ü–†–û–í–ï–†–Ø–¢–¨ –í–¢–û–†–´–ú
        let secondaryMatch = trimmedLine.match(REGEX_SECONDARY_ROUTE);
        if (secondaryMatch) {
            const path = this._createRouteObject(secondaryMatch.groups);
            if (this.lastPrimaryRoute) {
                if (!this.lastPrimaryRoute.secondary_paths) {
                    this.lastPrimaryRoute.secondary_paths = [];
                }
                this.lastPrimaryRoute.secondary_paths.push(path);
            } else {
                targetRouteArray.push(path); // '–û—Å–∏—Ä–æ—Ç–µ–≤—à–∏–π' –ø—É—Ç—å
            }
            return true;
        }

        // --------------------------------------------------

        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ
        return super.parseLine(line);
    }

    // --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã ---
    _createRouteObject(groups) {
        return {
            // trim() –Ω—É–∂–µ–Ω, —Ç.–∫. `.+?` –º–æ–∂–µ—Ç –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –ª–∏—à–Ω–∏–π –ø—Ä–æ–±–µ–ª –≤ –∫–æ–Ω—Ü–µ —Å—Ç–∞—Ç—É—Å–∞
            status: groups.status.trim(),
            network: this._parseValue(groups.network), // –ë—É–¥–µ—Ç undefined (->null) –¥–ª—è secondary
            next_hop: this._parseValue(groups.nexthop)
        };
    }

    _parseValue(value) {
        if (value === undefined || value === null) return null;
        const trimmed = value.trim();
        return trimmed === '' ? null : trimmed;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å
module.exports = DisplayBgpEvpnRoutingTableParser;