const path = require('path');
const PluginLoader = require('./core/PluginLoader');
const ParserEngine = require('./core/ParserEngine');

async function main() {
  console.log('--- –ó–∞–ø—É—Å–∫ –≥–∏–±–∫–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ ---');

  // 1. –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø–ª–∞–≥–∏–Ω—ã –∏–∑ –ø–∞–ø–∫–∏ /plugins
  const loader = new PluginLoader();
  const plugins = loader.load();

  if (plugins.length === 0) {
    console.error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–ª–∞–≥–∏–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É /plugins.');
    return;
  }

  // 2. –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –¥–≤–∏–∂–æ–∫
  const engine = new ParserEngine(plugins);
  const logFilePath = path.join(__dirname, 'logs', 'huawei_config.txt');
  
  console.log(`\nüìÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞: ${logFilePath}\n`);
  const results = await engine.processFile(logFilePath);

  // 3. –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  console.log('--- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ ---');
  console.log(JSON.stringify(results, null, 2));
}

main().catch(console.error);