const BaseParser = require('../core/BaseParser');

class DisplayIpRoutingTableParser extends BaseParser {
  constructor() {
    super();
    this.name = 'display_ip_routing_table_block';
    
    // –•—Ä–∞–Ω–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–∫—É—â—É—é —Ç–∞–±–ª–∏—Ü—É –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é –ø–∞—Ä—Å–∏–º
    this.currentRoutingTable = null;

    this.rules = [
      {
        // –ü—Ä–∞–≤–∏–ª–æ –Ω–∞—Ö–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, Routing Table : _public_)
        name: 'routing_table_header',
        regex: /^Routing Table\s*:\s*(?<name>\S+)/,
        handler: (match) => {
          const newTable = { name: match.groups.name, summary: {}, routes: [] };
          this.data.tables.push(newTable);
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç—Ç—É —Ç–∞–±–ª–∏—Ü—É –∫–∞–∫ —Ç–µ–∫—É—â—É—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
          this.currentRoutingTable = newTable;
        }
      },
      {
        // –ü—Ä–∞–≤–∏–ª–æ –¥–ª—è —Å–≤–æ–¥–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤
        name: 'summary_info',
        regex: /Destinations\s*:\s*(?<dest_count>\d+)\s+Routes\s*:\s*(?<route_count>\d+)/,
        handler: (match) => {
          if (this.currentRoutingTable) {
            this.currentRoutingTable.summary = {
              destinations: parseInt(match.groups.dest_count, 10),
              routes: parseInt(match.groups.route_count, 10),
            };
          }
        }
      },
      {
        // –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ –∫–∞–∂–¥–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ
        // üî• –û–Ω–æ –æ—á–µ–Ω—å –≥–∏–±–∫–æ–µ: –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏ "–æ—Å—Ç–∞—Ç–æ–∫" —Å—Ç—Ä–æ–∫–∏
        name: 'route_entry',
        regex: /^\s*(?<Destination_Mask>\S+)\s+(?<Proto>\S+)\s+(?<Pre>\d+)\s+(?<Cost>\d+)\s+(?<TheRest>.*)$/,
        handler: (match) => {
          if (!this.currentRoutingTable) return;

          // "–û—Å—Ç–∞—Ç–æ–∫" —Å—Ç—Ä–æ–∫–∏ —Ä–∞–∑–±–∏—Ä–∞–µ—Ç—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ, –∞ –Ω–µ –æ–¥–Ω–æ–π —Å–ª–æ–∂–Ω–æ–π —Ä–µ–≥—É–ª—è—Ä–∫–æ–π
          const rest = match.groups.TheRest.trim().split(/\s+/);
          
          const interfaceName = rest.pop(); // –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç - –≤—Å–µ–≥–¥–∞ Interface
          const next_hop = rest.pop();      // –ü—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π - –≤—Å–µ–≥–¥–∞ NextHop
          const flags = rest.join(' ') || null; // –í—Å—ë, —á—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å (–µ—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å) - —ç—Ç–æ Flags

          this.currentRoutingTable.routes.push({
            destination_mask: match.groups.Destination_Mask,
            protocol: match.groups.Proto,
            preference: parseInt(match.groups.Pre, 10),
            cost: parseInt(match.groups.Cost, 10),
            flags: flags,
            next_hop: next_hop,
            interface: interfaceName,
          });
        }
      },
      {
        // –ü—Ä–∞–≤–∏–ª–æ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ª–µ–≥–µ–Ω–¥—ã –∏ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
        name: 'ignore_lines',
        regex: /^(?:Proto:|Route Flags:|---)/,
        handler: () => { /* –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º */ }
      }
    ];
  }

  /**
   * –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: –∏—â–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã. –≠—Ç–æ —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π –º–∞—Ä–∫–µ—Ä.
   */
  isEntryPoint(line) {
    // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –Ω–∞–π–¥–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫.
    return line.includes('Destination/Mask') && line.includes('Proto') && line.includes('Pre');
  }

  startBlock(line, match) {
    super.startBlock(line, match);
    this.data = {
      type: this.name,
      tables: [], // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
    };
    this.currentRoutingTable = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  }
}

module.exports = DisplayIpRoutingTableParser;