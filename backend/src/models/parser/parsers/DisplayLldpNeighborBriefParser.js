const BaseParser = require('../core/BaseParser');

class DisplayLldpNeighborBriefParser extends BaseParser {
  constructor() {
    super();
    this.name = 'display_lldp_neighbor_brief_block';

    this.rules = [
      {
        // –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Å–æ—Å–µ–¥–µ
        name: 'neighbor_row',
        // üî• –≠—Ç–∞ —Ä–µ–≥—É–ª—è—Ä–∫–∞ –æ—á–µ–Ω—å –≥–∏–±–∫–∞—è: –æ–Ω–∞ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞,
        // –∞ –≤—Å–µ, —á—Ç–æ –º–µ–∂–¥—É –Ω–∏–º–∏, —Å—á–∏—Ç–∞–µ—Ç –∏–º–µ–Ω–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
        regex: /^\s*(?<local_intf>\S+)\s+(?<neighbor_dev>.+?)\s+(?<neighbor_intf>\S+)\s+(?<exptime>\d+)\s*$/,
        handler: (match) => {
          this.data.neighbors.push({
            local_interface: match.groups.local_intf,
            neighbor_device: match.groups.neighbor_dev.trim(),
            neighbor_interface: match.groups.neighbor_intf,
            expire_time_s: parseInt(match.groups.exptime, 10),
          });
        }
      },
      {
        // –ü—Ä–∞–≤–∏–ª–æ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
        name: 'ignore_lines',
        regex: /^(?:Local Intf|---)/,
        handler: () => {
          // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        }
      }
    ];
  }

  /**
   * –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: –∏—â–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤.
   */
  isEntryPoint(line) {
    return line.includes('Local Intf') && line.includes('Neighbor Dev') && line.includes('Exptime');
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
   */
  startBlock(line, match) {
    super.startBlock(line, match);
    this.data = {
      type: this.name,
      neighbors: [], // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ—Å–µ–¥–µ–π
    };
  }
}

module.exports = DisplayLldpNeighborBriefParser;