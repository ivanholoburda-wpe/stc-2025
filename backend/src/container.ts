import "reflect-metadata";
import { Container } from "inversify";
import { DataSource } from "typeorm";
import { AppDataSource } from "./database/data-source";
import { DeviceRepository, IDeviceRepository } from "./repositories/DeviceRepository";
import { DeviceService, IDeviceService } from "./services/device/DeviceService";
import { DeviceHandler } from "./handlers/DeviceHandler";
import { TYPES } from "./types";
import { IOptionRepository } from "./repositories/OptionRepository";
import { OptionRepository } from "./repositories/OptionRepository";
import { DefaultOptionsSeeder } from "./services/seeders/OptionsSeeder";
import { ConfigurationService, IConfigurationService } from "./services/config/ConfigurationService";
import { ParsingHandler } from "./handlers/ParsingHandler";
import RootFolderParsingService from "./services/parser/RootFolderParsingService";
import { LogsParserService } from "./services/parser/LogsParserService";
import { IAIClient } from "./services/ai-agent/client/IAIClient";
import { GeminiClient } from "./services/ai-agent/client/GeminiAIClient";
import { ISnapshotRepository, SnapshotRepository } from "./repositories/SnapshotRepository";
import { ITransceiverRepository, TransceiverRepository } from "./repositories/TransceiverRepository";
import { IInterfaceRepository, InterfaceRepository } from "./repositories/InterfaceRepository";
import {AIPromptBuilder} from "./services/ai-agent/AIPromptBuilder";
import {AIAgent} from "./services/ai-agent/AIAgent";
import { ISnapshotService, SnapshotService } from "./services/snapshot/SnapshotService"
import {SnapshotHandler} from "./handlers/SnapshotHandler";
import {AlarmRepository, IAlarmRepository} from "./repositories/AlarmRepository";
import {ARPRecordRepository, IARPRecordRepository} from "./repositories/ARPRecordRepository";
import {IIngestor} from "./services/ingestion/ingestors/IIngestor";
import {InterfaceBriefIngestor} from "./services/ingestion/ingestors/InterfaceBriefIngestor";
import {IpInterfaceBriefIngestor} from "./services/ingestion/ingestors/IpInterfaceBriefIngestor";
import {TransceiverBriefIngestor} from "./services/ingestion/ingestors/TransceiverBriefIngestor";
import {TransceiverVerboseIngestor} from "./services/ingestion/ingestors/TransceiverVerboseIngestor";
import {AlarmIngestor} from "./services/ingestion/ingestors/AlarmIngestor";
import {ArpIngestor} from "./services/ingestion/ingestors/ArpIngestor";
import {BfdRepository, IBfdRepository} from "./repositories/BfdSessionRepository";
import {BfdIngestor} from "./services/ingestion/ingestors/BfdIngestor";
import {IStpRepository, StpRepository} from "./repositories/StpRepository";
import {StpIngestor} from "./services/ingestion/ingestors/StpIngestor";
import {SysnameIngestor} from "./services/ingestion/ingestors/SysnameIngestor";
import {HardwareComponentRepository, IHardwareComponentRepository} from "./repositories/HardwareComponentRepository";
import {HardwareComponentIngestor} from "./services/ingestion/ingestors/HardwareComponentIngestor";
import {IpuDetailIngestor} from "./services/ingestion/ingestors/IpuDetailIngestor";
import {PowerDetailIngestor} from "./services/ingestion/ingestors/PowerDetailIngestor";
import {FanDetailIngestor} from "./services/ingestion/ingestors/FanDetailIngestor";
import {BgpPeerRepository, IBgpPeerRepository} from "./repositories/BgpPeerRepository";
import {BgpPeerIngestor} from "./services/ingestion/ingestors/BgpPeerIngestor";
import {BgpEvpnPeerIngestor} from "./services/ingestion/ingestors/BgpEvpnPeerIngestor";
import {IStorageSummaryRepository, StorageSummaryRepository} from "./repositories/StorageSummaryRepository";
import {StorageSummaryIngestor} from "./services/ingestion/ingestors/StorageSummaryIngestor";
import {CpuUsageRepository, ICpuUsageRepository} from "./repositories/CpuUsageRepository";
import {CpuUsageIngestor} from "./services/ingestion/ingestors/CpuUsageIngestor";
import {IIsisPeerRepository, IsisPeerRepository} from "./repositories/IsisPeerRepository";
import {IsisPeerIngestor} from "./services/ingestion/ingestors/IsisPeerIngestor";
import {IPatchInfoRepository, PatchInfoRepository} from "./repositories/PatchInfoRepository";
import {PatchInfoIngestor} from "./services/ingestion/ingestors/PatchInfoIngestor";
import {IIpRouteRepository, IpRouteRepository} from "./repositories/IpRouteRepository";
import {IpRouteIngestor} from "./services/ingestion/ingestors/IpRouteIngestor";
import {ILicenseInfoRepository, LicenseInfoRepository} from "./repositories/LicenseInfoRepository";
import {LicenseInfoIngestor} from "./services/ingestion/ingestors/LicenseInfoIngestor";
import {IMplsL2vcRepository, MplsL2vcRepository} from "./repositories/MplsL2vcRepository";
import {MplsL2vcIngestor} from "./services/ingestion/ingestors/MplsL2vcIngestor";
import {IOspfInterfaceRepository, OspfInterfaceRepository} from "./repositories/OspfInterfaceRepository";
import {OspfInterfaceIngestor} from "./services/ingestion/ingestors/OspfInterfaceIngestor";
import {IVpnInstanceRepository, VpnInstanceRepository} from "./repositories/VpnInstanceRepository";
import {VpnInstanceIngestor} from "./services/ingestion/ingestors/VpnInstanceIngestor";
import {IPhysicalLinkRepository, PhysicalLinkRepository} from "./repositories/PhysicalLinkRepository";
import {LldpNeighborIngestor} from "./services/ingestion/ingestors/LldpNeighborIngestor";
import {ITopologyService, TopologyService} from "./services/topology/TopologyService";
import {TopologyHandler} from "./handlers/TopologyHandler";
import {AnalyticsRepository, IAnalyticsRepository} from "./repositories/AnalyticsRepository";
import {IMetricProvider} from "./services/analytics/providers/IMetricProvider";
import {CpuSystemUsageProvider} from "./services/analytics/providers/CpuSystemUsageProvider";
import {StorageFreeMbProvider} from "./services/analytics/providers/StorageFreeMbProvider";
import {ArpTotalCountProvider} from "./services/analytics/providers/ArpTotalCountProvider";
import {TransceiverRxPowerProvider} from "./services/analytics/providers/TransceiverRxPowerProvider";
import {TransceiverTxPowerProvider} from "./services/analytics/providers/TransceiverTxPowerProvider";
import {InterfaceStatusProvider} from "./services/analytics/providers/InterfaceStatusProvider";
import {BfdUpSessionsCountProvider} from "./services/analytics/providers/BfdUpSessionsCountProvider";
import {AlarmsCriticalCountProvider} from "./services/analytics/providers/AlarmsCriticalCountProvider";
import {AnalyticsService} from "./services/analytics/AnalyticsService";
import {AnalyticsHandler} from "./handlers/AnalyticsHandler";

const container = new Container();

// Bind DataSource
container.bind<DataSource>(TYPES.DataSource).toConstantValue(AppDataSource);

// Bind Repository
container.bind<IDeviceRepository>(TYPES.DeviceRepository).to(DeviceRepository);
container.bind<IOptionRepository>(TYPES.OptionRepository).to(OptionRepository);
container.bind<ISnapshotRepository>(TYPES.SnapshotRepository).to(SnapshotRepository);
container.bind<ITransceiverRepository>(TYPES.TransceiverRepository).to(TransceiverRepository);
container.bind<IInterfaceRepository>(TYPES.InterfaceRepository).to(InterfaceRepository);
container.bind<IAlarmRepository>(TYPES.AlarmRepository).to(AlarmRepository);
container.bind<IARPRecordRepository>(TYPES.ARPRecordRepository).to(ARPRecordRepository);
container.bind<IBfdRepository>(TYPES.BfdRepository).to(BfdRepository);
container.bind<IStpRepository>(TYPES.StpRepository).to(StpRepository);
container.bind<IHardwareComponentRepository>(TYPES.HardwareComponentRepository).to(HardwareComponentRepository);
container.bind<IBgpPeerRepository>(TYPES.BgpPeerRepository).to(BgpPeerRepository);
container.bind<IStorageSummaryRepository>(TYPES.StorageSummaryRepository).to(StorageSummaryRepository);
container.bind<ICpuUsageRepository>(TYPES.CpuUsageRepository).to(CpuUsageRepository);
container.bind<IAnalyticsRepository>(TYPES.AnalyticsRepository).to(AnalyticsRepository);

// Bind Service
container.bind<IDeviceService>(TYPES.DeviceService).to(DeviceService);
container.bind<DefaultOptionsSeeder>(TYPES.DefaultOptionsSeeder).to(DefaultOptionsSeeder);
container.bind<IConfigurationService>(TYPES.ConfigurationService).to(ConfigurationService);
container.bind<RootFolderParsingService>(TYPES.RootFolderParsingService).to(RootFolderParsingService);
container.bind<LogsParserService>(TYPES.LogsParserService).to(LogsParserService);
container.bind<IAIClient>(TYPES.AIClient).to(GeminiClient).inSingletonScope();
container.bind<AIPromptBuilder>(TYPES.AIPromptBuilder).to(AIPromptBuilder);
container.bind<AIAgent>(TYPES.AIAgent).to(AIAgent);
container.bind<ISnapshotService>(TYPES.SnapshotService).to(SnapshotService);
container.bind<IIsisPeerRepository>(TYPES.IsisPeerRepository).to(IsisPeerRepository);
container.bind<IPatchInfoRepository>(TYPES.PatchInfoRepository).to(PatchInfoRepository);
container.bind<IIpRouteRepository>(TYPES.IpRouteRepository).to(IpRouteRepository);
container.bind<ILicenseInfoRepository>(TYPES.LicenseInfoRepository).to(LicenseInfoRepository);
container.bind<IMplsL2vcRepository>(TYPES.MplsL2vcRepository).to(MplsL2vcRepository);
container.bind<IOspfInterfaceRepository>(TYPES.OspfInterfaceRepository).to(OspfInterfaceRepository);
container.bind<IVpnInstanceRepository>(TYPES.VpnInstanceRepository).to(VpnInstanceRepository);
container.bind<IPhysicalLinkRepository>(TYPES.PhysicalLinkRepository).to(PhysicalLinkRepository);
container.bind<ITopologyService>(TYPES.TopologyService).to(TopologyService);
container.bind<AnalyticsService>(TYPES.AnalyticsService).to(AnalyticsService);

container.bind<DeviceHandler>(DeviceHandler).toSelf();
container.bind<ParsingHandler>(ParsingHandler).toSelf();
container.bind<SnapshotHandler>(SnapshotHandler).toSelf();
container.bind<TopologyHandler>(TopologyHandler).toSelf();
container.bind<AnalyticsHandler>(AnalyticsHandler).toSelf();

// Ingestors
container.bind<IIngestor>(TYPES.IIngestor).to(InterfaceBriefIngestor);
container.bind<IIngestor>(TYPES.IIngestor).to(IpInterfaceBriefIngestor);
container.bind<IIngestor>(TYPES.IIngestor).to(TransceiverBriefIngestor);
container.bind<IIngestor>(TYPES.IIngestor).to(TransceiverVerboseIngestor);
container.bind<IIngestor>(TYPES.IIngestor).to(AlarmIngestor);
container.bind<IIngestor>(TYPES.IIngestor).to(ArpIngestor);
container.bind<IIngestor>(TYPES.IIngestor).to(BfdIngestor);
container.bind<IIngestor>(TYPES.IIngestor).to(StpIngestor);
container.bind<IIngestor>(TYPES.IIngestor).to(SysnameIngestor);
container.bind<IIngestor>(TYPES.IIngestor).to(HardwareComponentIngestor);
container.bind<IIngestor>(TYPES.IIngestor).to(IpuDetailIngestor);
container.bind<IIngestor>(TYPES.IIngestor).to(PowerDetailIngestor);
container.bind<IIngestor>(TYPES.IIngestor).to(FanDetailIngestor);
container.bind<IIngestor>(TYPES.IIngestor).to(BgpPeerIngestor);
container.bind<IIngestor>(TYPES.IIngestor).to(BgpEvpnPeerIngestor);
container.bind<IIngestor>(TYPES.IIngestor).to(StorageSummaryIngestor);
container.bind<IIngestor>(TYPES.IIngestor).to(CpuUsageIngestor);
container.bind<IIngestor>(TYPES.IIngestor).to(IsisPeerIngestor);
container.bind<IIngestor>(TYPES.IIngestor).to(PatchInfoIngestor);
container.bind<IIngestor>(TYPES.IIngestor).to(IpRouteIngestor);
container.bind<IIngestor>(TYPES.IIngestor).to(LicenseInfoIngestor);
container.bind<IIngestor>(TYPES.IIngestor).to(MplsL2vcIngestor);
container.bind<IIngestor>(TYPES.IIngestor).to(OspfInterfaceIngestor);
container.bind<IIngestor>(TYPES.IIngestor).to(VpnInstanceIngestor);
container.bind<IIngestor>(TYPES.IIngestor).to(LldpNeighborIngestor);

// Analytics providers
container.bind<IMetricProvider>(TYPES.IMetricProvider).to(CpuSystemUsageProvider);
container.bind<IMetricProvider>(TYPES.IMetricProvider).to(StorageFreeMbProvider);
container.bind<IMetricProvider>(TYPES.IMetricProvider).to(AlarmsCriticalCountProvider);
container.bind<IMetricProvider>(TYPES.IMetricProvider).to(ArpTotalCountProvider);
container.bind<IMetricProvider>(TYPES.IMetricProvider).to(BfdUpSessionsCountProvider);
container.bind<IMetricProvider>(TYPES.IMetricProvider).to(InterfaceStatusProvider);
container.bind<IMetricProvider>(TYPES.IMetricProvider).to(TransceiverRxPowerProvider);
container.bind<IMetricProvider>(TYPES.IMetricProvider).to(TransceiverTxPowerProvider);

export { container };
